using System;
using System.Data;
using System.Data.SqlClient;
using LIBUtil;

namespace NamespaceName
{
    public class ClassName
    {
        /*******************************************************************************************************/
        #region PUBLIC VARIABLES

        public Guid Id;
        public string Notes = "";
		public bool Active;

        #endregion PUBLIC VARIABLES
        /*******************************************************************************************************/
        #region DATABASE FIELDS

        public const string COL_DB_Id = "Id";
        public const string COL_DB_Notes = "Notes";
        public const string COL_DB_Active = "Active";

        #endregion PUBLIC VARIABLES
        /*******************************************************************************************************/
        #region CONSTRUCTOR METHODS
		
        public ClassName(Guid id)
        {
            DataRow row =  Util.getFirstRow(get(id));
            Id = id;
            Notes = Util.wrapNullable<string>(row, COL_DB_Notes);
        }

        public ClassName() { }

        #endregion CONSTRUCTOR METHODS
        /*******************************************************************************************************/
        #region DATABASE METHODS

        public static Guid add(string Notes)
        {
            Guid Id = Guid.NewGuid();
            SqlQueryResult result = DBConnection.query(
                false,
                DBConnection.ActiveSqlConnection,
                QueryTypes.ExecuteNonQuery,
                "xxx_add",
                new SqlQueryParameter(COL_DB_Id, SqlDbType.UniqueIdentifier, Id),
                new SqlQueryParameter(COL_DB_Notes, SqlDbType.NVarChar, Util.wrapNullable(Notes))
            );

            if(result.IsSuccessful)
                LOGGING.ActivityLog.add(DBConnection.ActiveSqlConnection, userAccountID, id, "Added");
            
            return Id;
        }

        public static DataTable get(Guid? Id, string Notes)
        {		
            SqlQueryResult result = DBConnection.query(
                false,
                DBConnection.ActiveSqlConnection,
                QueryTypes.FillByAdapter, 
                "xxx_get",
                new SqlQueryParameter(COL_DB_Id, SqlDbType.UniqueIdentifier, Util.wrapNullable(Id)),
                new SqlQueryParameter(COL_DB_Notes, SqlDbType.NVarChar, Util.wrapNullable(Notes))
                );
            return result.Datatable;
        }

        public static void update(Guid Id, string Notes)
        {
            ClassName objOld = new ClassName(Id);
            string log = "";
            log = Util.webAppendChange(log, objOld.Notes, Notes, "Notes: '{0}' to '{1}'");

            if (string.IsNullOrEmpty(log))
                Util.displayMessageBoxError("No changes to record");
            else
            {
                SqlQueryResult result = DBConnection.query(
	                false,
                    DBConnection.ActiveSqlConnection,
                    QueryTypes.ExecuteNonQuery,
                    "xxx_update",
                    new SqlQueryParameter(COL_DB_Id, SqlDbType.UniqueIdentifier, Id),
                    new SqlQueryParameter(COL_DB_Notes, SqlDbType.NVarChar, Util.wrapNullable(Notes))
                );

                if(result.IsSuccessful)
					LOGGING.ActivityLog.add(DBConnection.ActiveSqlConnection, userAccountID, id, String.Format("Updated: {0}", log));
					
				//notify supervisor role
				//if (new UserAccount(userAccountID).UserRole != UserAccountRoles.Supervisor)
				//  add row to Notifications table
            }
        }

        public static void updateActiveStatus(Guid Id, bool Value)
        {
            SqlQueryResult result = DBConnection.query(
                false,
                DBConnection.ActiveSqlConnection,
                QueryTypes.ExecuteNonQuery,
                "xxx_update_Active",
                new SqlQueryParameter(COL_DB_Id, SqlDbType.UniqueIdentifier, Id),
                new SqlQueryParameter(COL_DB_Active, SqlDbType.Bit, Value)
            );

            if(result.IsSuccessful)
                LOGGING.ActivityLog.add(DBConnection.ActiveSqlConnection, userAccountID, Id, "Update Active Status to " + Value);
        }

        public static void delete(Guid Id)
        {
            SqlQueryResult result = DBConnection.query(
                false,
                DBConnection.ActiveSqlConnection,
                QueryTypes.ExecuteNonQuery,
                "xxx_delete",
                new SqlQueryParameter(COL_DB_Id, SqlDbType.UniqueIdentifier, id)
            );

            if(result.IsSuccessful)
                LOGGING.ActivityLog.add(DBConnection.ActiveSqlConnection, userAccountID, Id, "Deleted");
        }
		
        public static bool isNameExist(Guid? Id, string Name)
        {
            SqlQueryResult result = DBConnection.query(
                false,
                DBConnection.ActiveSqlConnection,
                QueryTypes.ExecuteNonQuery,
                false, false, false, true, false,
                "xxx_isExist_Name",
                new SqlQueryParameter(COL_DB_Id, SqlDbType.UniqueIdentifier, Util.wrapNullable(Id)),
                new SqlQueryParameter(COL_DB_No, SqlDbType.NVarChar, Name)
                );
            return result.ValueBoolean;
        }

        #endregion DATABASE METHODS
        /*******************************************************************************************************/
        #region CLASS METHODS

        #endregion CLASS METHODS
        /*******************************************************************************************************/
    }
}


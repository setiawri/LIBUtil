
--------------------------------------------------------------------------------------------------------------------------------------------

RECURSION

	DECLARE @ParentId uniqueidentifier = 'A1CABB69-EF88-4842-ADF8-6E0380F3DCF9'

	;WITH FolderPaths AS (

	   SELECT Files.*
	   FROM Files
	   WHERE Id = @ParentId -- Recursion starting point

	   UNION ALL

	   SELECT Files.*
	   FROM Files 
		 JOIN FolderPaths on FolderPaths.ParentId = Files.Id -- Recursion while ParentId IS NOT NULL
		  AND Files.Id <> Files.ParentId -- Exit condition

	) SELECT FolderPaths.* FROM FolderPaths

--------------------------------------------------------------------------------------------------------------------------------------------

select into temp table and iterate through rows

	-- drop table if already exists
	IF(SELECT object_id('TempDB..#TEMP_INPUTARRAY')) IS NOT NULL
		DROP TABLE #TEMP_INPUTARRAY
		
	SELECT * INTO #TEMP_INPUTARRAY FROM (SELECT * FROM @ARRAY_UserAccountAccessEnum) AS x
	
	DECLARE @Iteration_Id umiqueidentifier
	WHILE EXISTS(SELECT * FROM #TEMP_INPUTARRAY)
	BEGIN
		-- (SELECT CONVERT(UNIQUEIDENTIFIER, Id) FROM #TEMP_INPUTARRAY WHERE Id=@Iteration_Id),

		-- add operation here
		
		-- remove row to iterate to the next row
		DELETE #TEMP_INPUTARRAY WHERE Id = @Iteration_Id
	END
	
	-- clean up
	DROP TABLE #TEMP_INPUTARRAY

--------------------------------------------------------------------------------------------------------------------------------------------

FETCH PART OF ROWS

DECLARE @SKIP int = 0 -- start of index
DECALRE @TAKE int = 5 -- number of rows
DECLARE @FILTER_Keyword varchar(MAX) = ''

                        SELECT UserAccounts.*
                        FROM UserAccounts
                        WHERE 1=1
							AND (@FILTER_Keyword IS NULL OR (UserAccounts.Fullname LIKE '%'+@FILTER_Keyword+'%' OR UserAccounts.Username LIKE '%'+@FILTER_Keyword+'%'))
						ORDER BY UserAccounts.Fullname ASC
                        OFFSET COALESCE(@SKIP,0) ROWS
                        FETCH NEXT COALESCE(CONVERT(int, @TAKE),0x7ffffff) ROWS ONLY

--------------------------------------------------------------------------------------------------------------------------------------------

REMOVE TABLE IF EXISTS

	IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND  TABLE_NAME = 'TheTable'))
		DROP TABLE 'TheTable';

--------------------------------------------------------------------------------------------------------------------------------------------

return value as output

	code behind query to database
		SqlParameter return_value = cmd.Parameters.Add("@errormessage", SqlDbType.tinyint);
		return_value.Direction = ParameterDirection.Output;
		return_value.Value

	stored procedure
		CREATE PROCEDURE [dbo].[inventoryitem_isBarcodeValidForOpname]
			@barcode varchar(10), 
			@errorcode tinyint = 0 OUTPUT
		AS
		BEGIN
			SET @errorcode = 0
			DECLARE @return_value bit = 1
	
			EXECUTE @return_value = inventoryitem_isBarcodeExist @barcode, @return_value
			IF @return_value = 0
				SET @errorcode = 1
			IF @errorcode <> 0
				RETURN
		END

--------------------------------------------------------------------------------------------------------------------------------------------

work with date time 
	SELECT Sales.time_stamp, DATENAME(dw, Sales.time_stamp), DATEPART(HOUR, Sales.time_stamp)
	FROM Sales
	WHERE DATENAME(dw, Sales.time_stamp) = 'Saturday'  
	ORDER BY Sales.time_stamp DESC

get date with time at 00:00:00
	dateAdd(day, dateDiff(day, 0, CURRENT_TIMESTAMP ), 0) -- today
	dateAdd(day, dateDiff(day, -1, CURRENT_TIMESTAMP ), 0) -- add 1 day

create date from parameters
	select datefromparts(@year, @month, @day)

create date without time and set day to 1
	SELECT DATEADD(MONTH, DATEDIFF(MONTH, 0, getdate()), 0) 

add 1 month to a date without time and set day to 1
	DATEADD(MONTH, DATEDIFF(MONTH, 0, DATEADD(MONTH, 1, getdate())), 0) 

--------------------------------------------------------------------------------------------------------------------------------------------

GET BALANCE

                    SELECT InitialBalance.Amount + (SUM(PettyCashRecords.Amount) OVER(ORDER BY PettyCashRecords.Timestamp ASC)) AS Balance
                    FROM PettyCashRecords
                        LEFT JOIN (
                                SELECT 1 AS Id, SUM(PettyCashRecords.Amount) AS Amount
                                FROM PettyCashRecords
                                WHERE 1=1
                                    AND (@FILTER_DateFrom IS NULL OR PettyCashRecords.Timestamp < @FILTER_DateFrom)
                            ) InitialBalance ON InitialBalance.Id = 1
                    WHERE 1=1
						AND (@Id IS NULL OR PettyCashRecords.Id = @Id)
						AND (@Id IS NOT NULL OR (
                            (@FILTER_DateFrom IS NULL OR PettyCashRecords.Timestamp >= @FILTER_DateFrom)
                            AND (@FILTER_DateTo IS NULL OR PettyCashRecords.Timestamp <= @FILTER_DateTo)
                        ))
					ORDER BY PettyCashRecords.Timestamp ASC
					
--------------------------------------------------------------------------------------------------------------------------------------------

ROW NUMBER FOR ORDERING

                        SELECT Inventory.*,
                            ROW_NUMBER() OVER (ORDER BY Inventory.ReceiveDate DESC) AS InitialRowNumber
                        FROM Inventory
                        WHERE 1=1
						ORDER BY Inventory.ReceiveDate DESC

--------------------------------------------------------------------------------------------------------------------------------------------

GET string up to a space
						
    SELECT LEFT(UserAccounts.Fullname, 
                CASE 
                    WHEN charindex(' ', UserAccounts.Fullname) = 0 
                    THEN LEN(UserAccounts.Fullname) 
                    ELSE charindex(' ', UserAccounts.Fullname) - 1 
                END
            ) AS UserAccounts_Firstname,


--------------------------------------------------------------------------------------------------------------------------------------------

Compare column after converted to uppercase

	UPDATE StudentSchedules SET Notes = 'ONLINE' WHERE UPPER(Notes) collate SQL_Latin1_General_CP1_CS_AS = 'ONLINE'

--------------------------------------------------------------------------------------------------------------------------------------------

=================
STORED PROCEDURES
=================

DELETE STORED PROCEDURE
	IF EXISTS (select * from dbo.sysobjects where id = object_id(N'[dbo].[YourProcedure]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE [dbo].[YourProcedure]
	GO

execute stored procedure
	
	DECLARE @HexLength int = 5, @LastHex_String varchar(5), @NewNo varchar(5)
	SELECT @LastHex_String = ISNULL(MAX(No),'') From Payments	
	EXEC UTIL_IncrementHex @HexLength, @LastHex_String, @NewNo OUTPUT
	SELECT @NewNo

	****************************************************************************************************************************************
	CREATE PROCEDURE [dbo].[UTIL_IncrementHex]
		@HexLength int,
		@LastHex_String nvarchar(MAX),
		@NewHex_String nvarchar(MAX) OUTPUT
	AS
	BEGIN
		DECLARE @LastHex_Int int
		SELECT @LastHex_Int = CONVERT(INT, CONVERT(VARBINARY, REPLICATE('0', LEN(@LastHex_String)%2) + @LastHex_String, 2)) --@LastHex_String length must be even number of digits to convert to int
		SET @NewHex_String = RIGHT(CONVERT(NVARCHAR(10), CONVERT(VARBINARY(8), @LastHex_Int + 1), 1),@HexLength)
	END

	
query text in all stored procedures
	DECLARE @keystring varchar(MAX) = 'x'

	SELECT ROUTINE_NAME, ROUTINE_DEFINITION
	FROM INFORMATION_SCHEMA.ROUTINES
	WHERE ROUTINE_TYPE='PROCEDURE' AND ROUTINE_DEFINITION LIKE '%' + @keystring + '%'


ARRAYS
------

	Create user defined table type
	
		CREATE TYPE [dbo].[Array] AS TABLE(
			[value_str] [nvarchar](max) NULL,
			[value_int] [int] NULL
		)
		GO

--------------------------------------------------------------------------------------------------------------------------------------------

==================
ALTER TABLE COLUMN
==================

	ADD Column				

		ALTER TABLE {TABLENAME} 
		ADD {COLUMNNAME} {TYPE} {NULL|NOT NULL} 
		CONSTRAINT {CONSTRAINT_NAME} DEFAULT {DEFAULT_VALUE}
		WITH VALUES
	
		Example: ALTER TABLE Queues ADD CounterAddresses_Id uniqueidentifier NOT NULL 

	RENAME column
		EXEC sp_RENAME 'TableName.OldColumnName' , 'NewColumnName', 'COLUMN'

	DROP column
		IF EXISTS (SELECT 1
					   FROM   INFORMATION_SCHEMA.COLUMNS
					   WHERE  TABLE_NAME = 'ActivityLogs'
							  AND COLUMN_NAME = 'TableName'
							  AND TABLE_SCHEMA='dbo')
		  BEGIN
			  ALTER TABLE ActivityLogs DROP COLUMN TableName
		  END
		GO

	ALTER column to nullable
		ALTER TABLE QueueCategories ALTER COLUMN Description nvarchar(MAX) NULL


--------------------------------------------------------------------------------------------------------------------------------------------

================================================================
ERROR: user,group or role already exists in the current database
================================================================
ALTER USER [username] WITH Login = [username];

<DEPRECATED>
sp_change_users_login 'AUTO_FIX', '[user]'

--------------------------------------------------------------------------------------------------------------------------------------------

==========
CONVERSION
==========

	INT TO 5 digit VARCHAR

		UPDATE Sales SET hexbarcode=RIGHT(CONVERT(NVARCHAR(10), CONVERT(VARBINARY(8), Sales.barcode), 1),5)


--------------------------------------------------------------------------------------------------------------------------------------------

=================
DELETE ALL TABLES
=================

Run multiple times because dependencies throw errors

EXEC sp_MSforeachtable @command1 = "DROP TABLE ?"

--------------------------------------------------------------------------------------------------------------------------------------------

===============
COPY TABLE DATA
===============

INSERT INTO newTable
SELECT * FROM oldTable

Otherwise, you'll have to specify the column names 
(the column list for newTable is optional if you are specifying a value for all columns and selecting columns in the same order as newTable's schema):
INSERT INTO newTable (col1, col2, col3)
SELECT column1, column2, column3
FROM oldTable

--------------------------------------------------------------------------------------------------------------------------------------------

==================
SERVER PERFORMANCE
==================

	Wen the database's statistics and/or query plan cache are incorrect, it would cause the database to use a sub-optimal query plan. 
	It can be resolved by clearing the statistics. Do this only when server is not under heavy load.
		
		EXEC sp_updatestats



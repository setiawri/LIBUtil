using System;
using System.Data;
using LIBUtil;

namespace BinaMitraTextile
{
    public class FakturPajak
    {
        /*******************************************************************************************************/
        #region PUBLIC VARIABLES

        public Guid Id;
        public string No;
        public DateTime Timestamp;
        public decimal DPP;
        public decimal PPN;
        public string Notes = "";

        #endregion PUBLIC VARIABLES
        /*******************************************************************************************************/
        #region DATABASE FIELDS

        public const string COL_DB_Id = "Id";
        public const string COL_DB_No = "No";
        public const string COL_DB_Timestamp = "Timestamp";
        public const string COL_DB_DPP = "DPP";
        public const string COL_DB_PPN = "PPN";
        public const string COL_DB_Notes = "Notes";

        #endregion PUBLIC VARIABLES
        /*******************************************************************************************************/
        #region CONSTRUCTOR METHODS

        public FakturPajak(Guid id)
        {
            DataRow row = Util.getFirstRow(get(id));
            Id = id;
            No = Util.wrapNullable<string>(row, COL_DB_No);
            Timestamp = Util.wrapNullable<DateTime>(row, COL_DB_Timestamp);
            DPP = Util.wrapNullable<decimal>(row, COL_DB_DPP);
            PPN = Util.wrapNullable<decimal>(row, COL_DB_PPN);
            Notes = Util.wrapNullable<string>(row, COL_DB_Notes);
        }

        public FakturPajak() { }

        #endregion CONSTRUCTOR METHODS
        /*******************************************************************************************************/
        #region DATABASE METHODS

        public static Guid add(DateTime Timestamp, string No, decimal DPP, decimal PPN, string Notes)
        {
            Guid Id = Guid.NewGuid();
            SqlQueryResult result = DBConnection.query(
                false,
                DBConnection.ActiveSqlConnection,
                QueryTypes.ExecuteNonQuery,
                "FakturPajaks_add",
                new SqlQueryParameter(COL_DB_Id, SqlDbType.UniqueIdentifier, Id),
                new SqlQueryParameter(COL_DB_Timestamp, SqlDbType.DateTime, Util.getAsStartDate(Timestamp)),
                new SqlQueryParameter(COL_DB_No, SqlDbType.VarChar, No),
                new SqlQueryParameter(COL_DB_DPP, SqlDbType.UniqueIdentifier, DPP),
                new SqlQueryParameter(COL_DB_PPN, SqlDbType.UniqueIdentifier, PPN),
                new SqlQueryParameter(COL_DB_Notes, SqlDbType.NVarChar, Util.wrapNullable(Notes))
            );

            if (result.IsSuccessful)
                ActivityLog.submit(Id, "Added");

            return Id;
        }

        public static DataTable get(Guid? Id)
        {
            SqlQueryResult result = DBConnection.query(
                false,
                DBConnection.ActiveSqlConnection,
                QueryTypes.FillByAdapter,
                "FakturPajaks_get",
                new SqlQueryParameter(COL_DB_Id, SqlDbType.UniqueIdentifier, Util.wrapNullable(Id))
                );
            return result.Datatable;
        }

        public static void update(Guid Id, DateTime Timestamp, string No, decimal DPP, decimal PPN, string Notes)
        {
            FakturPajak objOld = new FakturPajak(Id);
            string log = "";
            log = Util.appendChange(log, objOld.No, No, "No: '{0}' to '{1}'");
            log = Util.appendChange(log, objOld.Timestamp, Timestamp, "Date: '{0:dd/MM/yy}' to '{1:dd/MM/yy}'");
            log = Util.appendChange(log, objOld.DPP, DPP, "DPP: '{0}' to '{1}'");
            log = Util.appendChange(log, objOld.PPN, PPN, "PPN: '{0}' to '{1}'");
            log = Util.appendChange(log, objOld.Notes, Notes, "Notes: '{0}' to '{1}'");

            if (string.IsNullOrEmpty(log))
                Util.displayMessageBoxError("No changes to record");
            else
            {
                SqlQueryResult result = DBConnection.query(
                    false,
                    DBConnection.ActiveSqlConnection,
                    QueryTypes.ExecuteNonQuery,
                    "FakturPajaks_update",
                    new SqlQueryParameter(COL_DB_Id, SqlDbType.UniqueIdentifier, Id),
                    new SqlQueryParameter(COL_DB_Timestamp, SqlDbType.DateTime, Timestamp),
                    new SqlQueryParameter(COL_DB_No, SqlDbType.VarChar, No),
                    new SqlQueryParameter(COL_DB_DPP, SqlDbType.UniqueIdentifier, DPP),
                    new SqlQueryParameter(COL_DB_PPN, SqlDbType.UniqueIdentifier, PPN),
                    new SqlQueryParameter(COL_DB_Notes, SqlDbType.NVarChar, Util.wrapNullable(Notes))
                );

                if (result.IsSuccessful)
                    ActivityLog.submit(Id, String.Format("Updated: {0}", log));

                //notify supervisor role
                //if (new UserAccount(userAccountID).UserRole != UserAccountRoles.Supervisor)
                //  add row to Notifications table
            }
        }

        #endregion DATABASE METHODS
        /*******************************************************************************************************/
        #region CLASS METHODS

        #endregion CLASS METHODS
        /*******************************************************************************************************/
    }
}

